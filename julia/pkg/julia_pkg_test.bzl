"""Rules for testing Julia Manifest synchronization"""

def _rlocationpath(file, workspace_name):
    """Convert a file to its runfiles location path."""
    if file.short_path.startswith("../"):
        return file.short_path[len("../"):]
    return "{}/{}".format(workspace_name, file.short_path)

def _julia_pkg_test_impl(ctx):
    manifest_toml = ctx.file.julia_manifest
    manifest_bazel_json = ctx.file.bazel_manifest

    test_runner = ctx.executable._test_runner
    executable = ctx.actions.declare_file("{}.{}".format(ctx.label.name, test_runner.extension).rstrip("."))
    ctx.actions.symlink(
        output = executable,
        target_file = test_runner,
        is_executable = True,
    )

    runfiles = ctx.runfiles(files = [manifest_toml, manifest_bazel_json]).merge(
        ctx.attr._test_runner[DefaultInfo].default_runfiles,
    )

    return [
        DefaultInfo(
            executable = executable,
            runfiles = runfiles,
        ),
        RunEnvironmentInfo(
            environment = {
                "RULES_JULIA_PKG_TEST_MANIFEST_BAZEL_JSON": _rlocationpath(manifest_bazel_json, ctx.workspace_name),
                "RULES_JULIA_PKG_TEST_MANIFEST_TOML": _rlocationpath(manifest_toml, ctx.workspace_name),
            },
        ),
    ]

julia_pkg_test = rule(
    doc = """\
A test rule that verifies Manifest.bazel.json is in sync with Manifest.toml.

This test ensures that the lockfile generated by pkg_compiler contains the correct
package versions, UUIDs, and dependencies that match the Manifest.toml file.

The test will fail if:
- A package is missing from the lockfile
- Versions don't match between the two files
- UUIDs don't match
- The git-tree-sha1 is not in the package URL
- SHA256 hashes are missing

Example:

```python
julia_pkg_test(
    name = "pkg_sync_test",
    manifest_toml = "Manifest.toml",
    manifest_bazel_json = "Manifest.bazel.json",
)
```

Then run:

```sh
bazel test //:pkg_sync_test
```

This will verify that both manifest files are synchronized. If they're out of sync,
the test will fail with detailed error messages indicating what needs to be fixed.
""",
    implementation = _julia_pkg_test_impl,
    attrs = {
        "bazel_manifest": attr.label(
            doc = "The Manifest.bazel.json lockfile to verify.",
            allow_single_file = True,
            mandatory = True,
        ),
        "julia_manifest": attr.label(
            doc = "The Manifest.toml file to compare against.",
            allow_single_file = ["Manifest.toml", ".toml"],
            mandatory = True,
        ),
        "_test_runner": attr.label(
            executable = True,
            cfg = "target",
            default = Label("//julia/pkg/private:pkg_tester"),
        ),
    },
    test = True,
)
